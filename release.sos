#!/usr/bin/env sos-runner
#fileformat=SOS1.0

[global]
import getpass
parameter: workdir = 'jupyter-book'
parameter: htmldir = 'docs'
# Set to True to preview it at http://0.0.0.0:4000/${workdir}
parameter: serve = False
# Run docker based jekyll. Use --no-use-docker to disable it
parameter: use_docker = True

[setup: provides = f'{workdir}/Gemfile']
parameter: version = '0.5.2'
is_master = version == 'master'
depends: Py_Module(f'jupyter_book{("==%s" % version) if not is_master else ""}', autoinstall = False if is_master else True)
if is_master: run('pip install git+https://github.com/jupyter/jupyter-book -U')
bash: expand = '${ }'
	rm -rf ${workdir} && jupyter-book create ${workdir}
	rm -rf ${workdir}/content/* && rm -f ${workdir}/Gemfile.lock

[build]
depends: executable('rsync'), f'{workdir}/Gemfile'
from sos.utils import env
bash: expand = '${ }'
	rsync -auz --delete src/* --exclude "*.bib" ${workdir}/content/
	rsync -auz --delete --ignore-missing-args src/*.bib  ${workdir}/_bibliography
	cp cfg/toc.yml ${workdir}/_data
	cp cfg/_config.yml ${workdir}/_config.yml
  	jupyter-book build ${workdir} ${'--overwrite' if env.config['sig_mode'] == 'force' else ''}

# a hack for https://github.com/jupyter/jupyter-book/issues/72
import platform, glob
exec = "sed -i '' -e" if platform.system() == 'Darwin' else "sed -i -e"
for x in glob.glob('src/*/[!_]*.ipynb'):
	x = path(f"jupyter-book/_build/{path(x).relative_to('src'):n}.md")
	if x.is_file():
		run(f'''{exec} 's/scope=col/scope="col"/g; s/scope=row/scope="row"/g' {x}''', stderr=False, stdout=False)

[make_jekyll_image]
docker_build: workdir = workdir, tag = f'{getpass.getuser()}/jekyll-book'
	FROM jekyll/jekyll:4.0.0
	RUN apk --update add make gcc g++ libc-dev
	COPY Gemfile .
	RUN gem install bundle && bundle install

[run_jekyll_image]
depends: executable('docker')
bash:  workdir = workdir, expand = "${ }"
	docker container stop $(docker container ls -q --filter ancestor=${getpass.getuser()}/jekyll-book) &> /dev/null || true
	docker run --rm --security-opt label:disable \
   		-v `pwd`:/srv/jekyll \
   		${'-p 4000:4000' if serve else ''} -it -u 1000:1000 \
   		${getpass.getuser()}/jekyll-book \
		 bundle exec jekyll ${'build' if not serve else 'serve --host 0.0.0.0'}

[run_jekyll]
depends: executable('bundle')
bash:  workdir = workdir, expand = "${ }"
	${("echo 'Preview the website at: http://0.0.0.0:4000/lab-wiki; type **one** ctrl-c to stop it.'") if serve else ""}
 	bundle exec jekyll ${'build' if not serve else 'serve --host 0.0.0.0 > /dev/null'}

[make_site]
depends: executable('rsync')
bash: expand = '${ }'
	mkdir -p ${htmldir}
	rsync -auz --delete ${workdir}/_site/* ${htmldir}/
	rsync -auz --delete src/external ${htmldir}/
	rm -f ${htmldir}/runtime.txt
	cp src/index.html ${htmldir}/index.html
	echo "Deployed to the ${htmldir}/ folder"

[default]
sos_run('build')
if (not use_docker):
	sos_run('run_jekyll')
else:
	sos_run('make_jekyll_image')
	sos_run('run_jekyll_image')
stop_if(serve or len(htmldir)==0)
sos_run('make_site')