#!/usr/bin/env sos-runner
#fileformat=SOS1.0

[global]
import getpass
parameter: workdir = 'jupyter-book'
# Set to True to preview it at http://0.0.0.0:4000/${workdir}
parameter: serve = False

[setup: provides = f'{workdir}/Gemfile']
parameter: version = '0.5.2'
is_master = version == 'master'
depends: Py_Module(f'jupyter_book{("==%s" % version) if not is_master else ""}', autoinstall = False if is_master else True)
if is_master: run('pip install git+https://github.com/jupyter/jupyter-book -U')
bash: expand = '${ }'
	rm -rf ${workdir} && jupyter-book create ${workdir} 
	rm -rf ${workdir}/content/* && rm -f ${workdir}/Gemfile.lock

[build_1]
depends: executable('rsync'), f'{workdir}/Gemfile'
from sos.utils import env
bash: expand = '${ }'
	rsync -auz --delete src/* --exclude "*.bib" ${workdir}/content/
	rsync -auz --delete --ignore-missing-args src/*.bib  ${workdir}/_bibliography
	cp cfg/toc.yml ${workdir}/_data
	cp cfg/_config.yml ${workdir}/_config.yml
  	jupyter-book build ${workdir} ${'--overwrite' if env.config['sig_mode'] == 'force' else ''}

[build_2]
docker_build: workdir = workdir, tag = f'{getpass.getuser()}/jekyll-book'
	FROM jekyll/jekyll:4.0.0
	RUN apk --update add make gcc g++ libc-dev
	COPY Gemfile .
	RUN gem install bundle && bundle install 

[build_3]
depends: executable('docker')
bash:  workdir = workdir, expand = "${ }"
	docker container stop $(docker container ls -q --filter ancestor=${getpass.getuser()}/jekyll-book) &> /dev/null || true
	docker run --rm --security-opt label:disable \
   		-v `pwd`:/srv/jekyll \
   		${'-p 4000:4000' if serve else ''} -it -u 1000:1000 \
   		${getpass.getuser()}/jekyll-book \
		 bundle exec jekyll ${'build' if not serve else 'serve --host 0.0.0.0'}

[build_4]
stop_if(serve)
depends: executable('rsync')
bash: expand = '${ }'
	mkdir -p docs
	rsync -auz --delete ${workdir}/_site/* docs/
	rsync -auz --delete src/external docs/
	rm -f docs/runtime.txt
	cp src/index.html docs/index.html
	echo "Deployed to the docs/ folder"

[default]
sos_run('build')
